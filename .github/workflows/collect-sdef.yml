name: Collect macOS Application Data

on:
  schedule:
    # Run daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_update:
        description: 'F    - name: Upload data as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-app-data-${{ steps.macos-version.outputs.version }}
        path: data/
        retention-days: 30
        if-no-files-found: warn

    - name: Trigger webapp deployment
      if: steps.commit-changes.outputs.changes_committed == 'true'
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: data-updated
        client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'ate even if no changes detected'
        required: false
        default: 'false'
        type: boolean

jobs:
  collect-sdef:
    runs-on: macos-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Get macOS version
      id: macos-version
      run: |
        MACOS_VERSION=$(sw_vers -productVersion)
        MACOS_NAME=$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $2}' | awk '{print $1}' | head -1 2>/dev/null || echo "Unknown")
        if [ "$MACOS_NAME" = "Unknown" ]; then
          # Fallback method for macOS name detection
          case "${MACOS_VERSION%%.*}" in
            14) MACOS_NAME="Sonoma" ;;
            13) MACOS_NAME="Ventura" ;;
            12) MACOS_NAME="Monterey" ;;
            11) MACOS_NAME="Big Sur" ;;
            10) MACOS_NAME="Catalina" ;;
            *) MACOS_NAME="macOS" ;;
          esac
        fi
        echo "version=$MACOS_VERSION" >> $GITHUB_OUTPUT
        echo "name=$MACOS_NAME" >> $GITHUB_OUTPUT
        echo "tag=macos-${MACOS_VERSION}" >> $GITHUB_OUTPUT
        echo "macOS Version: $MACOS_VERSION ($MACOS_NAME)"
    
    - name: Remove existing data directory
      run: |
        if [ -d "data" ]; then
          rm -rf data
        fi
    
    - name: Run application data collection script
      run: |
        echo "Collecting macOS application data..."
        sudo python3 collect_macos_app_data.py
        
        # Count collected data
        TOTAL_APPS=$(find data -mindepth 1 -maxdepth 1 -type d | wc -l | tr -d ' ')
        TOTAL_SDEF_FILES=$(find data -name "*.sdef" | wc -l | tr -d ' ')
        TOTAL_CODESIGN_FILES=$(find data -name "codesign.txt" | wc -l | tr -d ' ')
        TOTAL_ENTITLEMENTS_FILES=$(find data -name "entitlements.plist" | wc -l | tr -d ' ')
        TOTAL_INFO_PLIST_FILES=$(find data -name "info.plist" | wc -l | tr -d ' ')
        TOTAL_SANDBOX_FILES=$(find data -name "sandbox.txt" | wc -l | tr -d ' ')
        
        echo "Collection Summary:"
        echo "- Applications processed: $TOTAL_APPS"
        echo "- SDEF files collected: $TOTAL_SDEF_FILES"
        echo "- Code signing files: $TOTAL_CODESIGN_FILES"
        echo "- Entitlements files: $TOTAL_ENTITLEMENTS_FILES"
        echo "- Info.plist files: $TOTAL_INFO_PLIST_FILES"
        echo "- Sandbox analysis files: $TOTAL_SANDBOX_FILES"
        
        echo "TOTAL_APPS=$TOTAL_APPS" >> $GITHUB_ENV
        echo "TOTAL_SDEF_FILES=$TOTAL_SDEF_FILES" >> $GITHUB_ENV
        echo "TOTAL_CODESIGN_FILES=$TOTAL_CODESIGN_FILES" >> $GITHUB_ENV
        echo "TOTAL_ENTITLEMENTS_FILES=$TOTAL_ENTITLEMENTS_FILES" >> $GITHUB_ENV
        echo "TOTAL_INFO_PLIST_FILES=$TOTAL_INFO_PLIST_FILES" >> $GITHUB_ENV
        echo "TOTAL_SANDBOX_FILES=$TOTAL_SANDBOX_FILES" >> $GITHUB_ENV
    
    - name: Check for changes
      id: changes
      run: |
        git add data/
        if git diff --cached --quiet; then
          echo "No changes detected in application data"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in application data"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Generate diff summary
          ADDED_FILES=$(git diff --cached --name-status | grep "^A" | wc -l | tr -d ' ')
          MODIFIED_FILES=$(git diff --cached --name-status | grep "^M" | wc -l | tr -d ' ')
          DELETED_FILES=$(git diff --cached --name-status | grep "^D" | wc -l | tr -d ' ')
          
          echo "ADDED_FILES=$ADDED_FILES" >> $GITHUB_ENV
          echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV
          echo "DELETED_FILES=$DELETED_FILES" >> $GITHUB_ENV
        fi
    
    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit changes
        git add data/
        git commit -m "Update macOS application data for ${{ steps.macos-version.outputs.version }} (${{ steps.macos-version.outputs.name }})

        - Processed ${{ env.TOTAL_APPS }} applications
        - Collected ${{ env.TOTAL_SDEF_FILES }} SDEF files
        - Generated ${{ env.TOTAL_CODESIGN_FILES }} code signing reports
        - Extracted ${{ env.TOTAL_ENTITLEMENTS_FILES }} entitlements files
        - Processed ${{ env.TOTAL_INFO_PLIST_FILES }} Info.plist files
        - Created ${{ env.TOTAL_SANDBOX_FILES }} sandbox analyses
        - File changes: +${{ env.ADDED_FILES || '0' }} ~${{ env.MODIFIED_FILES || '0' }} -${{ env.DELETED_FILES || '0' }}
        - Runner: ${{ runner.os }} ${{ steps.macos-version.outputs.version }}
        - Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
        
        # Push to main
        git push origin main
    
    - name: Create or update tag
      if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_update == 'true'
      run: |
        TAG_NAME="${{ steps.macos-version.outputs.tag }}"
        
        # Delete existing tag if it exists (both local and remote)
        git tag -d "$TAG_NAME" 2>/dev/null || true
        git push origin ":refs/tags/$TAG_NAME" 2>/dev/null || true
        
        # Create new tag
        git tag -a "$TAG_NAME" -m "macOS Application Data for ${{ steps.macos-version.outputs.version }} (${{ steps.macos-version.outputs.name }})

        Collected on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Applications processed: ${{ env.TOTAL_APPS }}
        SDEF files: ${{ env.TOTAL_SDEF_FILES }}
        Code signing reports: ${{ env.TOTAL_CODESIGN_FILES }}
        Entitlements: ${{ env.TOTAL_ENTITLEMENTS_FILES }}
        Info.plist files: ${{ env.TOTAL_INFO_PLIST_FILES }}
        Sandbox analyses: ${{ env.TOTAL_SANDBOX_FILES }}
        Runner: GitHub Actions macOS runner
        
        This tag contains comprehensive application data from macOS ${{ steps.macos-version.outputs.version }} (${{ steps.macos-version.outputs.name }}).
        Each application directory includes SDEF files, code signing data, entitlements, Info.plist, and sandbox analysis."
        
        # Push the tag
        git push origin "$TAG_NAME"
        
        echo "Created tag: $TAG_NAME"
    
    - name: Generate summary
      if: always()
      run: |
        echo "## macOS Application Data Collection Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| macOS Version | ${{ steps.macos-version.outputs.version }} (${{ steps.macos-version.outputs.name }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Applications Processed | ${{ env.TOTAL_APPS || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SDEF Files | ${{ env.TOTAL_SDEF_FILES || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Signing Reports | ${{ env.TOTAL_CODESIGN_FILES || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Entitlements Files | ${{ env.TOTAL_ENTITLEMENTS_FILES || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Info.plist Files | ${{ env.TOTAL_INFO_PLIST_FILES || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Sandbox Analyses | ${{ env.TOTAL_SANDBOX_FILES || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Changes Detected | ${{ steps.changes.outputs.has_changes || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tag Created | ${{ steps.macos-version.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Timestamp | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "data" ]; then
          echo "### Application Directories Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for dir in data/*/; do
            if [ -d "$dir" ]; then
              app_name=$(basename "$dir")
              sdef_count=$(find "$dir/sdef" -name "*.sdef" 2>/dev/null | wc -l | tr -d ' ')
              has_codesign=$([ -f "$dir/codesign.txt" ] && echo "✓" || echo "✗")
              has_entitlements=$([ -f "$dir/entitlements.plist" ] && echo "✓" || echo "✗")
              has_info_plist=$([ -f "$dir/info.plist" ] && echo "✓" || echo "✗")
              has_sandbox=$([ -f "$dir/sandbox.txt" ] && echo "✓" || echo "✗")
              echo "- **$app_name**: $sdef_count SDEF | Code:$has_codesign | Ent:$has_entitlements | Info:$has_info_plist | Sandbox:$has_sandbox" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Data Structure" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "data/" >> $GITHUB_STEP_SUMMARY
          echo "├── ApplicationName1/" >> $GITHUB_STEP_SUMMARY
          echo "│   ├── sdef/" >> $GITHUB_STEP_SUMMARY
          echo "│   │   └── *.sdef" >> $GITHUB_STEP_SUMMARY
          echo "│   ├── codesign.txt" >> $GITHUB_STEP_SUMMARY
          echo "│   ├── entitlements.plist" >> $GITHUB_STEP_SUMMARY
          echo "│   ├── info.plist" >> $GITHUB_STEP_SUMMARY
          echo "│   └── sandbox.txt" >> $GITHUB_STEP_SUMMARY
          echo "└── ..." >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload data as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-app-data-${{ steps.macos-version.outputs.version }}
        path: data/
        retention-days: 30
        if-no-files-found: warn
